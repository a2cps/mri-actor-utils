# generated by datamodel-codegen:
#   filename:  https://github.com/tapis-project/tapipy/raw/main/tapipy/resources/openapi_v3-apps.yml
#   timestamp: 2024-09-02T15:48:38+00:00

from __future__ import annotations

from typing import Any, Literal
from uuid import UUID

from pydantic import BaseModel, Field


class ExecSystemConstraint(BaseModel):
    __root__: str = Field(..., min_length=3)


class Include(BaseModel):
    __root__: str = Field(..., min_length=1)


class Exclude(BaseModel):
    __root__: str = Field(..., min_length=1)


class ArchiveFilter(BaseModel):
    includes: list[Include] | None = None
    excludes: list[Exclude] | None = None
    includeLaunchFiles: bool | None = True


class LogConfig(BaseModel):
    stdoutFilename: str
    stderrFilename: str


class SourceUrl(BaseModel):
    __root__: str = Field(..., min_length=1)


class IdString(BaseModel):
    __root__: str = Field(..., max_length=80, min_length=1)


class AppVersionString(BaseModel):
    __root__: str = Field(..., max_length=64, min_length=1)


class DescriptionString(BaseModel):
    __root__: str = Field(..., max_length=2048)


class ArgDescriptionString(BaseModel):
    __root__: str = Field(..., max_length=8096)


class InputNameString(BaseModel):
    __root__: str = Field(..., max_length=80, min_length=1)


class UserNameString(BaseModel):
    __root__: str = Field(..., max_length=60, min_length=1)


class UserNameApiDefaultString(BaseModel):
    __root__: str = Field(..., max_length=60, min_length=1)


class DirString(BaseModel):
    __root__: str = Field(..., max_length=4096, min_length=1)


class TagString(BaseModel):
    __root__: str = Field(..., max_length=128, min_length=1)


class QueueNameString(BaseModel):
    __root__: str = Field(..., max_length=128, min_length=1)


class ShareInfo(BaseModel):
    public: bool
    userList: list[UserNameString]


class ReqPerms(BaseModel):
    permissions: list[str] = Field(..., min_length=1)


class ReqSearchApps(BaseModel):
    search: list[str] = Field(..., min_length=1)


class ReqShareUpdate(BaseModel):
    users: list[str] = Field(..., min_length=1)


class RespBasic(BaseModel):
    status: str | None = None
    message: str | None = None
    version: str | None = None
    commit: str | None = None
    build: str | None = None
    result: dict[str, Any] | None = None
    metadata: dict[str, Any] | None = None


class ResultBoolean(BaseModel):
    aBool: bool | None = None


class ResultNameArray(BaseModel):
    names: list[str] | None = None


class ResultChangeCount(BaseModel):
    changes: int | None = None


class ResultResourceUrl(BaseModel):
    url: str | None = None


class Metadata(BaseModel):
    recordCount: int | None = None
    recordLimit: int | None = None
    recordsSkipped: int | None = None
    orderBy: str | None = None
    startAfter: str | None = None
    totalCount: int | None = None


class RespShareInfo(BaseModel):
    status: str | None = None
    message: str | None = None
    version: str | None = None
    commit: str | None = None
    build: str | None = None
    result: ShareInfo | None = None
    metadata: dict[str, Any] | None = None


class ListTypeEnum(BaseModel):
    __root__: Literal[
        "OWNED", "SHARED_PUBLIC", "SHARED_DIRECT", "READ_PERM", "MINE", "ALL"
    ]


class JobTypeEnum(BaseModel):
    __root__: Literal["BATCH", "FORK"]


class RuntimeEnum(BaseModel):
    __root__: Literal["SINGULARITY", "DOCKER", "ZIP"]


class RuntimeOptionEnum(BaseModel):
    __root__: Literal["NONE", "SINGULARITY_START", "SINGULARITY_RUN"]


class NotifDeliveryMethod(BaseModel):
    __root__: Literal["WEBHOOK", "EMAIL"]


class JobEventCategoryFilter(BaseModel):
    __root__: Literal[
        "ALL",
        "JOB_NEW_STATUS",
        "JOB_INPUT_TRANSACTION_ID",
        "JOB_ARCHIVE_TRANSACTION_ID",
        "JOB_ERROR_MESSAGE",
        "JOB_SUBSCRIPTION",
    ]


class FileInputModeEnum(BaseModel):
    __root__: Literal["REQUIRED", "OPTIONAL", "FIXED"]


class ArgInputModeEnum(BaseModel):
    __root__: Literal[
        "REQUIRED", "FIXED", "INCLUDE_ON_DEMAND", "INCLUDE_BY_DEFAULT"
    ]


class KeyValueInputModeEnum(BaseModel):
    __root__: Literal[
        "REQUIRED", "FIXED", "INCLUDE_ON_DEMAND", "INCLUDE_BY_DEFAULT"
    ]


class OperationTypeEnum(BaseModel):
    __root__: Literal[
        "CREATE",
        "READ",
        "MODIFY",
        "EXECUTE",
        "DELETE",
        "UNDELETE",
        "HARD_DELETE",
        "CHANGE_OWNER",
        "ENABLE",
        "DISABLE",
        "LOCK",
        "UNLOCK",
        "GET_PERMS",
        "GRANT_PERMS",
        "REVOKE_PERMS",
    ]


class RuntimeOptions(BaseModel):
    __root__: list[RuntimeOptionEnum]


class AppFileInput(BaseModel):
    name: InputNameString
    description: ArgDescriptionString | None = None
    inputMode: FileInputModeEnum | None = None
    autoMountLocal: bool | None = True
    notes: dict[str, Any] | None = None
    sourceUrl: str | None = Field(None, min_length=1)
    targetPath: str = Field(..., min_length=1)


class AppFileInputArray(BaseModel):
    name: InputNameString
    description: ArgDescriptionString | None = None
    inputMode: FileInputModeEnum | None = None
    notes: dict[str, Any] | None = None
    sourceUrls: list[SourceUrl] | None = None
    targetDir: str = Field(..., min_length=1)


class AppArgSpec(BaseModel):
    name: InputNameString
    description: ArgDescriptionString | None = None
    inputMode: ArgInputModeEnum | None = None
    arg: str | None = Field(None, min_length=1)
    notes: dict[str, Any] | None = None


class KeyValuePair(BaseModel):
    key: str = Field(..., min_length=1)
    value: str | None = ""
    description: DescriptionString | None = None
    inputMode: KeyValueInputModeEnum | None = None
    notes: dict[str, Any] | None = None


class NotifDeliveryTarget(BaseModel):
    deliveryMethod: NotifDeliveryMethod
    deliveryAddress: str


class AppHistory(BaseModel):
    appVersion: str | None = None
    jwtTenant: str | None = None
    jwtUser: UserNameString | None = None
    oboTenant: str | None = None
    oboUser: UserNameString | None = None
    operation: OperationTypeEnum | None = None
    description: str | None = None
    created: str | None = None


class RespBoolean(BaseModel):
    status: str | None = None
    message: str | None = None
    version: str | None = None
    commit: str | None = None
    build: str | None = None
    result: ResultBoolean | None = None
    metadata: dict[str, Any] | None = None


class RespNameArray(BaseModel):
    status: str | None = None
    message: str | None = None
    version: str | None = None
    commit: str | None = None
    build: str | None = None
    result: ResultNameArray | None = None
    metadata: dict[str, Any] | None = None


class RespChangeCount(BaseModel):
    status: str | None = None
    message: str | None = None
    version: str | None = None
    commit: str | None = None
    build: str | None = None
    result: ResultChangeCount | None = None
    metadata: dict[str, Any] | None = None


class RespResourceUrl(BaseModel):
    status: str | None = None
    message: str | None = None
    version: str | None = None
    commit: str | None = None
    build: str | None = None
    result: ResultResourceUrl | None = None
    metadata: dict[str, Any] | None = None


class RespAppHistory(BaseModel):
    status: str | None = None
    message: str | None = None
    version: str | None = None
    commit: str | None = None
    build: str | None = None
    result: list[AppHistory] | None = Field(None, min_length=1)
    metadata: dict[str, Any] | None = None


class ParameterSet(BaseModel):
    appArgs: list[AppArgSpec] | None = None
    containerArgs: list[AppArgSpec] | None = None
    schedulerOptions: list[AppArgSpec] | None = None
    envVariables: list[KeyValuePair] | None = None
    archiveFilter: ArchiveFilter | None = None
    logConfig: LogConfig | None = None


class ReqSubscribe(BaseModel):
    description: DescriptionString | None = None
    enabled: bool | None = True
    jobEventCategoryFilter: JobEventCategoryFilter
    ttlMinutes: int | None = 10080
    deliveryTargets: list[NotifDeliveryTarget] = Field(..., min_length=1)


class JobAttributes(BaseModel):
    description: DescriptionString | None = None
    dynamicExecSystem: bool | None = False
    execSystemConstraints: list[ExecSystemConstraint] | None = Field(
        None, min_length=1
    )
    execSystemId: IdString | None = None
    execSystemExecDir: DirString | None = None
    execSystemInputDir: DirString | None = None
    execSystemOutputDir: DirString | None = None
    execSystemLogicalQueue: QueueNameString | None = None
    archiveSystemId: IdString | None = None
    archiveSystemDir: DirString | None = None
    archiveOnAppError: bool | None = True
    isMpi: bool | None = False
    mpiCmd: str | None = Field(None, max_length=126, min_length=1)
    cmdPrefix: str | None = Field(None, max_length=126, min_length=1)
    parameterSet: ParameterSet | None = None
    fileInputs: list[AppFileInput] | None = None
    fileInputArrays: list[AppFileInputArray] | None = None
    nodeCount: int | None = None
    coresPerNode: int | None = None
    memoryMB: int | None = None
    maxMinutes: int | None = None
    subscriptions: list[ReqSubscribe] | None = None
    tags: list[TagString] | None = None


class ReqPostApp(BaseModel):
    id: IdString
    version: AppVersionString
    description: DescriptionString | None = None
    owner: UserNameApiDefaultString | None = None
    enabled: bool | None = True
    locked: bool | None = False
    runtime: RuntimeEnum | None = None
    runtimeVersion: str | None = None
    runtimeOptions: RuntimeOptions | None = None
    containerImage: str
    jobType: JobTypeEnum | None = None
    maxJobs: int | None = -1
    maxJobsPerUser: int | None = -1
    strictFileInputs: bool | None = False
    jobAttributes: JobAttributes | None = None
    tags: list[TagString] | None = None
    notes: dict[str, Any] | None = None


class ReqPatchApp(BaseModel):
    description: DescriptionString | None = None
    runtime: RuntimeEnum | None = None
    runtimeVersion: str | None = None
    runtimeOptions: RuntimeOptions | None = None
    containerImage: str | None = None
    jobType: JobTypeEnum | None = None
    maxJobs: int | None = -1
    maxJobsPerUser: int | None = -1
    strictFileInputs: bool | None = False
    jobAttributes: JobAttributes | None = None
    tags: list[TagString] | None = None
    notes: dict[str, Any] | None = None


class ReqPutApp(BaseModel):
    description: DescriptionString | None = None
    runtime: RuntimeEnum | None = None
    runtimeVersion: str | None = None
    runtimeOptions: RuntimeOptions | None = None
    containerImage: str | None = None
    jobType: JobTypeEnum | None = None
    maxJobs: int | None = -1
    maxJobsPerUser: int | None = -1
    strictFileInputs: bool | None = False
    jobAttributes: JobAttributes | None = None
    tags: list[TagString] | None = None
    notes: dict[str, Any] | None = None


class TapisApp(BaseModel):
    tenant: str | None = None
    id: IdString | None = None
    version: AppVersionString | None = None
    description: DescriptionString | None = None
    owner: UserNameApiDefaultString | None = None
    enabled: bool | None = True
    locked: bool | None = False
    isPublic: bool | None = None
    sharedWithUsers: list[str] | None = None
    runtime: RuntimeEnum | None = None
    runtimeVersion: str | None = None
    runtimeOptions: RuntimeOptions | None = None
    containerImage: str | None = None
    jobType: JobTypeEnum | None = None
    maxJobs: int | None = -1
    maxJobsPerUser: int | None = -1
    strictFileInputs: bool | None = False
    jobAttributes: JobAttributes | None = None
    tags: list[str] | None = None
    notes: dict[str, Any] | None = None
    sharedAppCtx: UserNameString | None = None
    uuid: UUID | None = None
    deleted: bool | None = None
    created: str | None = None
    updated: str | None = None


class RespApp(BaseModel):
    status: str | None = None
    message: str | None = None
    version: str | None = None
    commit: str | None = None
    build: str | None = None
    result: TapisApp | None = None
    metadata: dict[str, Any] | None = None


class RespApps(BaseModel):
    status: str | None = None
    message: str | None = None
    version: str | None = None
    commit: str | None = None
    build: str | None = None
    result: list[TapisApp] | None = None
    metadata: Metadata | None = None
